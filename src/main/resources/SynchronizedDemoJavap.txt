Classfile /D:/workspace/fengye/target/classes/javaBasic/SynchronizedDemo.class
  Last modified 2023-1-15; size 633 bytes
  MD5 checksum cb6d20b9fabeeaa2323f2c66146d6c03
  Compiled from "SynchronizedDemo.java"
public class javaBasic.SynchronizedDemo
  minor version: 0
  major version: 61
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Class              #2             // javaBasic/SynchronizedDemo
   #2 = Utf8               javaBasic/SynchronizedDemo
   #3 = Class              #4             // java/lang/Object
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Utf8               Code
   #8 = Methodref          #3.#9          // java/lang/Object."<init>":()V
   #9 = NameAndType        #5:#6          // "<init>":()V
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LjavaBasic/SynchronizedDemo;
  #14 = Utf8               test1
  #15 = Fieldref           #16.#18        // java/lang/System.out:Ljava/io/PrintStream;
  #16 = Class              #17            // java/lang/System
  #17 = Utf8               java/lang/System
  #18 = NameAndType        #19:#20        // out:Ljava/io/PrintStream;
  #19 = Utf8               out
  #20 = Utf8               Ljava/io/PrintStream;
  #21 = String             #22            // ????????.......
  #22 = Utf8               ????????.......
  #23 = Methodref          #24.#26        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #24 = Class              #25            // java/io/PrintStream
  #25 = Utf8               java/io/PrintStream
  #26 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V
  #27 = Utf8               println
  #28 = Utf8               (Ljava/lang/String;)V
  #29 = Utf8               StackMapTable
  #30 = Class              #31            // java/lang/Throwable
  #31 = Utf8               java/lang/Throwable
  #32 = Utf8               SourceFile
  #33 = Utf8               SynchronizedDemo.java
{
  public javaBasic.SynchronizedDemo();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LjavaBasic/SynchronizedDemo;

  public void test1();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=1
         0: aload_0
         1: dup
         2: astore_1
         3: monitorenter                      // 进入monitor
         4: getstatic     #15                 // Field java/lang/System.out:Ljava/io/PrintStream;
         7: ldc           #21                 // String ????????.......
         9: invokevirtual #23                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        12: aload_1
        13: monitorexit                       // 退出monitor
        14: goto          20
        17: aload_1
        18: monitorexit                       // 异常退出
        19: athrow
        20: return
      Exception table:
         from    to  target type
             4    14    17   any
            17    19    17   any
      LineNumberTable:
        line 6: 0
        line 7: 4
        line 6: 12
        line 9: 20
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      21     0  this   LjavaBasic/SynchronizedDemo;
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 17
          locals = [ class javaBasic/SynchronizedDemo, class javaBasic/SynchronizedDemo ]
          stack = [ class java/lang/Throwable ]
        frame_type = 250 /* chop */
          offset_delta = 2
}
SourceFile: "SynchronizedDemo.java"

Classfile /D:/workspace/fengye/target/classes/javaBasic/SynchronizedDemo.class
  Last modified 2023-1-15; size 831 bytes
  MD5 checksum 4a614ff91f27d20c74d2e43074bf727e
  Compiled from "SynchronizedDemo.java"
public class javaBasic.SynchronizedDemo
  minor version: 0
  major version: 61
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Class              #2             // javaBasic/SynchronizedDemo
   #2 = Utf8               javaBasic/SynchronizedDemo
   #3 = Class              #4             // java/lang/Object
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Utf8               Code
   #8 = Methodref          #3.#9          // java/lang/Object."<init>":()V
   #9 = NameAndType        #5:#6          // "<init>":()V
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LjavaBasic/SynchronizedDemo;
  #14 = Utf8               test1
  #15 = Fieldref           #16.#18        // java/lang/System.out:Ljava/io/PrintStream;
  #16 = Class              #17            // java/lang/System
  #17 = Utf8               java/lang/System
  #18 = NameAndType        #19:#20        // out:Ljava/io/PrintStream;
  #19 = Utf8               out
  #20 = Utf8               Ljava/io/PrintStream;
  #21 = String             #22            // ͬ▒▒▒▒▒▒▒.......
  #22 = Utf8               ͬ▒▒▒▒▒▒▒.......
  #23 = Methodref          #24.#26        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #24 = Class              #25            // java/io/PrintStream
  #25 = Utf8               java/io/PrintStream
  #26 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V
  #27 = Utf8               println
  #28 = Utf8               (Ljava/lang/String;)V
  #29 = Utf8               StackMapTable
  #30 = Class              #31            // java/lang/Throwable
  #31 = Utf8               java/lang/Throwable
  #32 = Utf8               test2
  #33 = String             #34            // ͬ▒▒▒▒▒▒.......
  #34 = Utf8               ͬ▒▒▒▒▒▒.......
  #35 = Utf8               test3
  #36 = String             #37            // ▒▒̬▒▒▒▒▒▒▒▒.....
  #37 = Utf8               ▒▒̬▒▒▒▒▒▒▒▒.....
  #38 = Utf8               SourceFile
  #39 = Utf8               SynchronizedDemo.java
{
  public javaBasic.SynchronizedDemo();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LjavaBasic/SynchronizedDemo;

  public void test1();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=1
         0: aload_0
         1: dup
         2: astore_1
         3: monitorenter
         4: getstatic     #15                 // Field java/lang/System.out:Ljava/io/PrintStream;
         7: ldc           #21                 // String ͬ▒▒▒▒▒▒▒.......
         9: invokevirtual #23                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        12: aload_1
        13: monitorexit
        14: goto          20
        17: aload_1
        18: monitorexit
        19: athrow
        20: return
      Exception table:
         from    to  target type
             4    14    17   any
            17    19    17   any
      LineNumberTable:
        line 6: 0
        line 7: 4
        line 6: 12
        line 9: 20
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      21     0  this   LjavaBasic/SynchronizedDemo;
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 17
          locals = [ class javaBasic/SynchronizedDemo, class javaBasic/SynchronizedDemo ]
          stack = [ class java/lang/Throwable ]
        frame_type = 250 /* chop */
          offset_delta = 2

  public synchronized void test2();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_SYNCHRONIZED
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #15                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #33                 // String ͬ▒▒▒▒▒▒.......
         5: invokevirtual #23                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 12: 0
        line 13: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   LjavaBasic/SynchronizedDemo;

  public static synchronized void test3();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED
    Code:
      stack=2, locals=0, args_size=0
         0: getstatic     #15                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #36                 // String ▒▒̬▒▒▒▒▒▒▒▒.....
         5: invokevirtual #23                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 16: 0
        line 17: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
}
SourceFile: "SynchronizedDemo.java"

// ACC_SYNCHRONIZED ： 当修饰方法(实例方法/静态方法)时，并没有看到monitorenter和monitorexit指令，使用的是ACC_SYNCHRONIZED,它的作用就是用来标识这是一个同步方法,一旦执行到这个方法时，如果有这个标志位，就会先尝试获取Monitor，获取成功才能执行方法，方法执行完成后再释放Monitor。归根结底还是对Monitor对象的争夺，底层还是通过monitorenter和monitorexit这对指令去工作的，只是同步方法是一种隐式的方式来实现的。
